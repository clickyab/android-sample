#+TITLE: ClickYab Sample App for Android

* [[https://github.com/clickyab/android-sample/blob/master/README-fa.org][مستندات فارسی]] 

* How To Add ClickYab SDK to Your Project

** Add to your dependencies
   Add the following line to the dependencies in the =build.gradle= file.

   #+BEGIN_SRC groovy
    compile 'com.clickyab:clickyab-sdk:1.2.9:mainRelease@aar'
   #+END_SRC

  Make sure to add dependency to the module level build file and not the
=build.gradle= file in root of your project. Also make sure =jecenter()= is 
in your repositories.

** Or Manually Add AAR file
 Download the *AAR* library from [[https://github.com/clickyab/android-sample/releases][releases]] and add it to your project:

 1. Go to File>New>New Module
 2. Select "Import .JAR/.AAR Package" and click next.
 3. Enter the path to .aar file and click finish.
 4. Go to File>Project Structure (Ctrl+Shift+Alt+S).
 5. Under "Modules," in left menu, select "app."
 6. Go to "Dependencies tab.
 7. Click the green "+" in the upper right corner.
 8. Select "Module Dependency"
 9. Select the new module from the list.
   

** Or Manually Add JAR file
 If you need the *JAR* format (not recommended) download it from [[https://github.com/clickyab/android-sample/releases][releases]]. 
 The JAR format does not have the progress indicator by default, but you can provide you own (see /Customizing/).

 Remember to add =INTERNET= and =ACCESS_NETWORK_STATE= permissions to =AndroidManifest.XML=.

* How to Use
Add one one the three size of banners to you layout. Remember to put your token.

  #+BEGIN_SRC xml
<com.clickyab.Banner 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        token="token"
        /><!-- 320*50 dp -->
  #+END_SRC
          
#+BEGIN_SRC xml
<com.clickyab.LargeBanner 
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      token="token"
      /><!-- 300*250 dp -->
#+END_SRC

#+BEGIN_SRC xml
<com.clickyab.XlargeBannerPortrait
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        token="token"
        /><!-- 320*480 dp -->
#+END_SRC

For fulscreen banner, create one and call the method =show=.

#+BEGIN_SRC java
  ClickYabFullAd banner = new ClickYabFullAd(getContext() , "token");
  banner.show();
#+END_SRC

* Adding listeners
You can also add listeners to banners. Note that the listeners are called multiple times.
Ads are reloaded every few minutes and on every reload the listeners are called once.

#+BEGIN_SRC java
  largeBanner = (LargeBanner) findViewById(R.id.largeBanner);
  largeBanner.setClickYabAdListener(new ClickYabAdListener() {
          @Override
          public void onLoadFinished() {
           // Called when loading is finished
          }

          @Override
          public void onNoAds() {
           // Called when there is no ads to display
          }

          @Override
          public void onClose() {
            // Called when user closes the ad
          }
      });
  }
#+END_SRC

You can set onClickListener for banners:

#+BEGIN_SRC java
  XlargeBannerPortrait banner = (XlargeBannerPortrait) findViewById(R.id.xlargeBannerPortrait);
  banner.setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {

          }
      });
#+END_SRC

* Customizing
You can disable the progress indicator:

#+BEGIN_SRC java
  XlargeBannerPortrait banner = (XlargeBannerPortrait) findViewById(R.id.xlargeBannerPortrait);
  banner.setHasProgressBar(false);
#+END_SRC

Or using =progress= in XML attribute:

  #+BEGIN_SRC xml
<com.clickyab.Banner 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        progress="false"
        token="token"
        /><!-- 320*50 dp -->
  #+END_SRC

You can provide your own progress indicator drawable:

#+BEGIN_SRC java
  XlargeBannerPortrait banner = (XlargeBannerPortrait) findViewById(R.id.xlargeBannerPortrait);
  banner.setProgressDrawable(getDrawable(R.id.custom_drawable));
#+END_SRC

You can set a timeout for loading ads. If the ad is not loaded after timeout, =onNoAds()= is called.
Default timeout is 10 seconds.

#+BEGIN_SRC java
  XlargeBannerPortrait banner = (XlargeBannerPortrait) findViewById(R.id.xlargeBannerPortrait);
  banner.setTimeOutSeconds(10);
#+END_SRC

Or using =timeout= in XML attribute:

  #+BEGIN_SRC xml
<com.clickyab.Banner 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        timeout="10"
        token="token"
        /><!-- 320*50 dp -->
  #+END_SRC

If there is no ads, visibility is automatically changed to =View.GONE= by default. You can change this by setting auto-hide to false;

#+BEGIN_SRC java
  XlargeBannerPortrait banner = (XlargeBannerPortrait) findViewById(R.id.xlargeBannerPortrait);
  banner.setAutoHide(false);
#+END_SRC

Or using =autohide= in XML attribute:

  #+BEGIN_SRC xml
<com.clickyab.Banner 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        autohide="false"
        token="token"
        /><!-- 320*50 dp -->
  #+END_SRC

* Proguard Rules
#+BEGIN_SRC text
-keepclassmembers class com.clickyab.ClickYabJavascriptInterfaceImpl {
   public *;
}
-keep public interface com.clickyab.ClickYabAdListener {*;}
-keep class com.clickyab.ClickYabFullAd {
  public *;
}
-keep public class * extends com.clickyab.ClickYabBanner
-keepclassmembers class * extends com.clickyab.ClickYabBanner {
 public <init>(android.content.Context);
 public <init>(android.content.Context, android.util.AttributeSet);
 public <init>(android.content.Context, android.util.AttributeSet, int);
}
#+END_SRC

* Warning 
Documents at https://www.clickyab.com/blog/clickyab-android-sdk-document/ are *outdated* and will be updated soon.
